---
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{title}</title>
    <meta name="view-transition" content="same-origin" />
  </head>
  <body>
    <div class="content">
      <slot />
    </div>
  </body>
</html>
<style is:global>
  :root {
    --accent: 136, 58, 234;
    --accent-light: 224, 204, 250;
    --accent-dark: 49, 10, 101;
    --accent-gradient: linear-gradient(
      45deg,
      rgb(var(--accent)),
      rgb(var(--accent-light)) 30%,
      white 60%
    );
  }
  html {
    font-family: system-ui, sans-serif;
    background: #fff;
    background-size: 224px;
  }
  code {
    font-family:
      Menlo,
      Monaco,
      Lucida Console,
      Liberation Mono,
      DejaVu Sans Mono,
      Bitstream Vera Sans Mono,
      Courier New,
      monospace;
  }
  @keyframes fade-in {
    from {
      opacity: 0;
    }
  }

  @keyframes fade-out {
    to {
      opacity: 0;
    }
  }

  @keyframes slide-from-right {
    from {
      transform: translateX(30px);
    }
  }

  @keyframes slide-to-left {
    to {
      transform: translateX(-30px);
    }
  }

  ::view-transition-old(root) {
    animation:
      300ms cubic-bezier(0.4, 0, 1, 1) both fade-out,
      700ms cubic-bezier(0.4, 0, 0.2, 1) both slide-to-left;
  }

  ::view-transition-new(root) {
    animation:
      210ms cubic-bezier(0, 0, 0.2, 1) 90ms both fade-in,
      700ms cubic-bezier(0.4, 0, 0.2, 1) both slide-from-right;
  }
</style>

<script>
  if (document.startViewTransition) {
    window.navigation.addEventListener("navigate", (e) => {
      const toUrl = new URL(e.destination.url);

      // es una pagina externa ? si es asi, lo ignoramos

      if (location.origin !== toUrl.origin) return;

      // si es una navagacion en el mismo dominio (origen)

      e.intercept({
        async handler() {
          // vamos a cargar la pagina de destino
          // utilizando un fetch para obtener el html

          const response = await fetch(toUrl.pathname); // clean-code
          const text = await response.text();
          // quedarnos  s√≥lo con el contenido del html dentro de la etiqueta body
          // usamos un regex para extraer el contenido

          const [, data] = text.match(/<body>([\s\S]*)<\/body>/i);

          // utilizar la api de View Transition API
          document.startViewTransition(() => {
            // como tiene que actualizar la vista
            document.body.innerHTML = data;
            document.documentElement.scrollTop = 0;
          });
        },
      });
    });
  }
</script>
